(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{441:function(o,a,e){"use strict";e.r(a);var r=e(11),s=Object(r.a)({},(function(){var o=this,a=o.$createElement,e=o._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("p",[o._v('"O Git é um sistema open-source de controle de versão utilizado pela grande maioria dos desenvolvedores atualmente. Com ele podemos criar todo histórico de alterações no código do nosso projeto e facilmente voltar para qualquer ponto para saber como o código estava naquela data.\nAlém disso, o Git nos ajuda muito a controlar o fluxo de novas funcionalidades entre vários desenvolvedores no mesmo projeto com ferramentas para análise e resolução de conflitos quando o mesmo arquivo é editado por mais de uma pessoa em funcionalidades diferentes."')]),o._v(" "),e("p",[o._v("Rockseat, 2017")]),o._v(" "),e("h2",{attrs:{id:"instalando-o-git-e-integrando-ao-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instalando-o-git-e-integrando-ao-github"}},[o._v("#")]),o._v(" Instalando o GIT e integrando ao Github")]),o._v(" "),e("ol",[e("li",[e("p",[e("strong",[o._v("Faça o download e instale o GIT BASH:")]),o._v(" "),e("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[o._v("Git Bash Download"),e("OutboundLink")],1)])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Crie uma conta no Github.")])])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Abra o Git Bash e gere uma chave SSH, que será usada para realizar as operações entre o seu dispositivo local e o Github:")]),o._v("\nObs: email deve ser o mesmo que foi cadastrado no Github."),e("br"),o._v(" "),e("code",[o._v('ssh-keygen -t rsa -b 4096 -C "seuEmail@exemplo.com"')]),e("br"),o._v("\nDê Enter em todas as etapas. Recomendo que não coloque senha para não ter que digita-lá toda vez que precisar realizar uma operação.")])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Inicie o agente SSH:")]),o._v(" "),e("code",[o._v("eval $(ssh-agent -s)")])])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Adicione a chave SSH gerada ao agente SSH:")]),o._v(" "),e("code",[o._v("ssh-add ~/.ssh/id_rsa")])])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Copie a chave SSH gerada para a área de transferência:")]),e("br"),o._v(" "),e("code",[o._v("clip < ~/.ssh/id_rsa.pub")]),e("br"),o._v("\nObs: se o comando clip não funcionar, tente usar o cat e copiar a chave que aparece no terminal:"),e("br"),o._v(" "),e("code",[o._v("cat < ~/.ssh/id_rsa.pub")]),e("br"),o._v('\nA chave deve estar no formato "ssh-rsa CaratecteresAleatorios seuEmail".')])]),o._v(" "),e("li",[e("p",[e("strong",[o._v("Adicione a chave SSH ao Github:")]),o._v("\nNo canto direito superior do site, clique na foto de perfil, e em seguida clique em ‘settings’, na barra lateral clique em ‘SSH and GPG keys’, na tela que abriu clique no botão ‘New SSH Key’.\nEm seguida, escolha um nome pelo qual a sua máquina será conhecida, no campo ‘key’ insira a chave copiada e clique em ‘Add SSH Key’.")])])]),o._v(" "),e("p",[e("em",[o._v("Esse passos podem ser diferentes de acordo com o Sistema Operacional usado, clique "),e("a",{attrs:{href:"https://help.github.com/pt/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"}},[o._v("aqui"),e("OutboundLink")],1),o._v(" para acessar o artigo completo.")])]),o._v(" "),e("h2",{attrs:{id:"criando-um-repositorio-no-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#criando-um-repositorio-no-git"}},[o._v("#")]),o._v(" Criando um repositório no GIT")]),o._v(" "),e("h3",{attrs:{id:"criando-repositorio-remoto-no-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#criando-repositorio-remoto-no-github"}},[o._v("#")]),o._v(" Criando repositório remoto no Github")]),o._v(" "),e("p",[o._v("Na página inicial do "),e("a",{attrs:{href:"https://github.com",target:"_blank",rel:"noopener noreferrer"}},[o._v("Github"),e("OutboundLink")],1),o._v(":\nClique no ‘+’ no canto superior direito, vá em ‘new repository’:\nEscolha um nome para o ‘repository name’ e clique em criar. Prefira criar um repósitorio vazio para evitar erros na hora de subir o seu repositório local."),e("br"),o._v("\nAgora, você precisa criar um repositório local que será subido para o Github.")]),o._v(" "),e("h2",{attrs:{id:"criando-repositorios-locais"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#criando-repositorios-locais"}},[o._v("#")]),o._v(" Criando repositórios locais")]),o._v(" "),e("h3",{attrs:{id:"configurando-o-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configurando-o-git"}},[o._v("#")]),o._v(" Configurando o GIT")]),o._v(" "),e("p",[e("strong",[o._v("Todos os comandos abaixo devem ser rodados no Git Bash ou no terminal se estiver usando Mac ou Linux.")])]),o._v(" "),e("p",[o._v("É necessário configurar o seu nome de usuário e email para utilizar o GIT, para isso rode os seguintes comandos no Git Bash:"),e("br"),o._v(" "),e("strong",[o._v("Os dados devem ser os mesmos dos usados na criação da conta do Github, e devem ser digitados entre aspas:")]),e("br"),o._v('\ngit config --global user.name "'),e("em",[o._v("seunome")]),o._v('"'),e("br"),o._v('\ngit config --global user.email "'),e("em",[o._v("seuemail")]),o._v('"'),e("br"),o._v(" "),e("strong",[o._v("Se quiser, pode definir um editor de texto de sua preferência:")]),e("br"),o._v('\ngit config --global core.editor "'),e("em",[o._v("seuEditordeTexto")]),o._v('"')]),o._v(" "),e("h3",{attrs:{id:"listando-configuracoes-do-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listando-configuracoes-do-git"}},[o._v("#")]),o._v(" Listando configurações do GIT")]),o._v(" "),e("p",[o._v("Mostra config específica (substitua "),e("em",[o._v("user.name")]),o._v(" pela config que quiser)"),e("br"),o._v(" "),e("code",[o._v("git config user.name")])]),o._v(" "),e("p",[o._v("Listar todas as configs"),e("br"),o._v(" "),e("code",[o._v("git config --list")])]),o._v(" "),e("h3",{attrs:{id:"iniciando-o-repositorio-local"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iniciando-o-repositorio-local"}},[o._v("#")]),o._v(" Iniciando o repositório local")]),o._v(" "),e("p",[o._v("Crie uma pasta no computador onde ficará armazenado o seu projeto."),e("br"),o._v("\nClique com o botão direito do mouse e escolha ‘Git Bash here’, um terminal do Git Bash será aberto. Rode então o comando para iniciar um novo repositório:"),e("br"),o._v(" "),e("code",[o._v("git init")])]),o._v(" "),e("p",[o._v("Crie um arquivo ‘teste.txt’ dentro da pasta e insira algum texto nele.")]),o._v(" "),e("h3",{attrs:{id:"visualizando-status-do-repositorio-local"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visualizando-status-do-repositorio-local"}},[o._v("#")]),o._v(" Visualizando status do repositório local")]),o._v(" "),e("p",[e("code",[o._v("git status")]),e("br"),o._v("\nEsse comando mostra informações sobre seu repositório, como a "),e("em",[o._v("branch")]),o._v(" em que você está trabalhando, se o seu repositório local está sincronizado com o remoto, e o status dos arquivos do seu repo, se estão sendo rastreados, se precisam ser commitados, etc.")]),o._v(" "),e("h3",{attrs:{id:"rastreando-os-arquivos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rastreando-os-arquivos"}},[o._v("#")]),o._v(" Rastreando os arquivos")]),o._v(" "),e("p",[e("code",[o._v("git add .")]),e("br"),o._v("\nEsse comando adiciona todos os arquivos da pasta para que sejam monitorados pelo sistema de versionamento, ou seja, você poderá voltar para uma versão antiga do arquivo se necessário.")]),o._v(" "),e("p",[o._v("Se quiser adicionar um arquivo especifíco use: "),e("code",[o._v("git add nomeDoArquivo")])]),o._v(" "),e("h3",{attrs:{id:"commitando-alteracoes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commitando-alteracoes"}},[o._v("#")]),o._v(" Commitando alterações")]),o._v(" "),e("p",[e("code",[o._v("git commit -m “mensagem”")])]),o._v(" "),e("p",[o._v("Esse comando criará uma versão do seu projeto, em mensagem, você deve inserir uma curta descrição do que foi alterado nessa versão em relação a anterior."),e("br"),o._v("\nEx: você criou um arquivo index.js na pasta, então você pode rodar o seguinte comando:\n"),e("code",[o._v("git commit -m “Add index.js”")])]),o._v(" "),e("p",[o._v("Cada commit possui um hash, que funciona como seu número de identificação, isso serve para manter a integridade do sistema, e poder realizar operações sobre um commit posteriormente.")]),o._v(" "),e("h3",{attrs:{id:"subindo-o-seu-repositorio-para-o-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subindo-o-seu-repositorio-para-o-github"}},[o._v("#")]),o._v(" Subindo o seu repositório para o Github")]),o._v(" "),e("p",[o._v("Volte agora para o repositório que você criou no Github. Agora, copie o primeiro comando que está na área: "),e("strong",[o._v("“...or push an existing repository from the command line”")]),o._v(", abra o Git Bash (botão direito do mouse -> Get Git Bash here) na pasta em que está o seu projeto local, cole o comando (shift + insert) e rode. Logo após, copie e rode o segundo comando.")]),o._v(" "),e("p",[e("strong",[o._v("PRONTO, VOCÊ JÁ TEM O SEU PRIMEIRO REPOSITÓRIO NO GITHUB.")])]),o._v(" "),e("h2",{attrs:{id:"extra"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extra"}},[o._v("#")]),o._v(" Extra")]),o._v(" "),e("h3",{attrs:{id:"listar-conteudo-de-uma-pasta"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listar-conteudo-de-uma-pasta"}},[o._v("#")]),o._v(" Listar conteúdo de uma pasta")]),o._v(" "),e("p",[e("code",[o._v("ls")]),o._v(": lista somente arquivos"),e("br"),o._v(" "),e("code",[o._v("ls -a")]),o._v(": lista arquivos e pastas"),e("br"),o._v(" "),e("code",[o._v("ls -l")]),o._v(": lista somente arquivos com informações sobre eles"),e("br"),o._v(" "),e("code",[o._v("ls -la")]),o._v(": combina os outros dois (arquivos, pastas e infos)")]),o._v(" "),e("h3",{attrs:{id:"usando-editor-externo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usando-editor-externo"}},[o._v("#")]),o._v(" Usando editor externo")]),o._v(" "),e("p",[e("code",[o._v("code Readme.md")]),e("br"),o._v("\nAbre o arquivo no VsCode")]),o._v(" "),e("h3",{attrs:{id:"usando-editor-interno-terminal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usando-editor-interno-terminal"}},[o._v("#")]),o._v(" Usando editor interno (terminal)")]),o._v(" "),e("p",[e("code",[o._v("vim Readme.md")]),e("br"),o._v("\ni: habilita edição")]),o._v(" "),e("p",[o._v("Para sair:"),e("br"),o._v("\npressione "),e("code",[o._v("ESC")]),e("br"),o._v("\ndigite "),e("code",[o._v(":wq")]),e("br"),o._v("\ndê "),e("code",[o._v("ENTER")])]),o._v(" "),e("h3",{attrs:{id:"estados-do-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#estados-do-git"}},[o._v("#")]),o._v(" Estados do Git")]),o._v(" "),e("p",[o._v("Para visualizar:"),e("br"),o._v(" "),e("code",[o._v("git status")])]),o._v(" "),e("p",[o._v("O Git implementa um sistema em que os arquivos do repósitorio sempre estão em um dos seguintes estados possíveis:")]),o._v(" "),e("p",[e("strong",[o._v("Arquivo foi criado:")]),e("br"),o._v(" "),e("em",[o._v("Untracked:")]),o._v(" arquivo foi adicionado, mas ainda não foi 'registrado' no Git.")]),o._v(" "),e("p",[e("strong",[o._v("Após dar git add arquivo")]),e("br"),o._v(" "),e("em",[o._v("Staged:")]),o._v(" arquivo começa a ser monitorado.")]),o._v(" "),e("p",[e("strong",[o._v("Após dar commit")]),e("br"),o._v(" "),e("em",[o._v("Unmodified:")]),o._v(" versão do arquivo é salva e passa a ser tratada como a versão atual")]),o._v(" "),e("p",[e("strong",[o._v("Após editar")]),e("br"),o._v(" "),e("em",[o._v("Modified:")]),o._v(" a versão criada com o commit anterior foi modificada")]),o._v(" "),e("p",[e("strong",[o._v("Dê git add arquivo")]),e("br"),o._v(" "),e("em",[o._v("Staged:")]),o._v(" é criada nova versão do arquivo")]),o._v(" "),e("p",[e("strong",[o._v('Dê commit (git commit -m "mensagem de log")')]),e("br"),o._v("\nNova versão é consolidada e salva.")]),o._v(" "),e("h3",{attrs:{id:"outros-comandos-uteis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outros-comandos-uteis"}},[o._v("#")]),o._v(" Outros comandos úteis")]),o._v(" "),e("p",[e("code",[o._v("git log")]),e("br"),o._v("\nMostra relatório dos commits feitos no repositório")]),o._v(" "),e("p",[e("code",[o._v("git log --decorate")]),e("br"),o._v("\nlog com informações adicionais")]),o._v(" "),e("p",[e("code",[o._v('git log --author="nome"')]),e("br"),o._v("\nprocura commits feitas por determinada pessoa")]),o._v(" "),e("p",[e("code",[o._v("git shortlog")]),e("br"),o._v("\nlog resumido somente com autores e commits")]),o._v(" "),e("p",[e("code",[o._v("git shortlog -sn")]),e("br"),o._v("\nmostra as pessoas que contribuiram no projeto")]),o._v(" "),e("p",[e("code",[o._v("git shortlog -graph")]),e("br"),o._v("\nlog gráfico")]),o._v(" "),e("p",[e("code",[o._v("git show hash_do_commit")]),e("br"),o._v("\nmostra dados sobre determinado commit")]),o._v(" "),e("p",[e("code",[o._v("git diff")]),e("br"),o._v("\nmostra os arquivos modificados e quais as modificações")]),o._v(" "),e("p",[e("code",[o._v("git diff --name-only")]),e("br"),o._v("\nmostra somente o nome dos arquivos que foram modificados")]),o._v(" "),e("p",[e("code",[o._v('git commit -am "log msg"')]),e("br"),o._v("\nAdiciona e já comita os arquivos modificados")]),o._v(" "),e("p",[e("code",[o._v("dir")]),e("br"),o._v("\nmostra os diretórios da local em que o terminal está aberto")]),o._v(" "),e("p",[e("code",[o._v("git checkout")]),e("br"),o._v("\ncancela modifições que ainda não foram para staged (não foi feito add ainda)")]),o._v(" "),e("p",[e("code",[o._v("git rm -r --cached arquivo")]),e("br"),o._v("\nremove arquivos que ainda não foram pro stage")]),o._v(" "),e("p",[e("code",[o._v("git reset Head arquivo")]),e("br"),o._v("\ncancela o comando "),e("em",[o._v("add")]),o._v(", quando o arquivo já está no estado staged mas ainda não foi feito commit")]),o._v(" "),e("p",[e("code",[o._v("git reset --")]),e("br"),o._v("\nrestaura para um commit anterior, usa-se hash do commit anterior ao que você quer cancelar, pois o último commit atua como ponteiro")]),o._v(" "),e("p",[e("code",[o._v("git reset --soft hash_do_commit")]),e("br"),o._v("\nvolta do commit pro staged")]),o._v(" "),e("p",[e("code",[o._v("git reset --mixed hash_do_commit")]),e("br"),o._v("\nvolta do commit pro modified (antes do staged)")]),o._v(" "),e("p",[e("code",[o._v("git reset --hard hash_do_commit")]),e("br"),o._v("\ndesaparece com o commit do mapa")]),o._v(" "),e("p",[e("code",[o._v("git push")]),e("br"),o._v("\nenvia atualizações do projeto pro Github")]),o._v(" "),e("p",[e("code",[o._v("git pull")]),e("br"),o._v("\natualiza o projeto local com o do Github")]),o._v(" "),e("p",[e("code",[o._v("git clone link_do_repositorio diretorio_onde_sera_armazenado")]),e("br"),o._v("\nclona repositório do Github para o seu computador"),e("br"),o._v("\nquando você clona o repositório não é possível fazer push se ele não for o seu")]),o._v(" "),e("p",[e("code",[o._v("git checkout -b nome_do_branch")]),e("br"),o._v("\ncria branch"),e("br"),o._v("\nBranches são como uma versão só sua do código, é imprescindível usá-las quando estamos trabalhando em um projeto com várias pessoas, para que um não atrapalhe o trabalho do outro.")]),o._v(" "),e("p",[e("code",[o._v("git branch")]),e("br"),o._v("\nlista branch's existentes")]),o._v(" "),e("p",[e("code",[o._v("git rebase -i HEAD~N")]),e("br"),o._v("\nremover commits mais antigos sem excluir os mais recentes")]),o._v(" "),e("p",[e("code",[o._v("git checkout nome_do_branch")]),e("br"),o._v("\nmovimentar entre branches")]),o._v(" "),e("p",[e("code",[o._v("git branch -d nome_do_branch")]),e("br"),o._v("\ndeletar branch"),e("br"),o._v(" "),e("strong",[o._v("Não é possível deletar a branch em uso, é necessário ir para outra branch primeiro")])]),o._v(" "),e("p",[o._v("Para unir os branches:"),e("br"),o._v(" "),e("code",[o._v("git merge nome_do_branch")]),e("br"),o._v("\nmerge - é uma operação não destrutiva e cria um commit extra para juntar os branches, cria um árvore com várias bifurcações, bagunça o histórico")]),o._v(" "),e("p",[e("code",[o._v("git rebase nome_do_branch")]),e("br"),o._v("\nrebase - coloca uma branch no ínicio da fila, deixa de forma linear, evita commit extra e mantém o histórico linear, mas perde ordem cronológica")]),o._v(" "),e("p",[e("code",[o._v("git pull --rebase")]),e("br"),o._v("\nevita mudanças de histórico"),e("br"),o._v("\nuso comum: quando for atualizar sua branch com master, use rebase.")]),o._v(" "),e("p",[o._v("Quando for introduzir a sua branch no master, use merge."),e("br"),o._v("\nchame o rebase ou merge na branch que deseja que eles sejam adicionados (geralmente a master).")]),o._v(" "),e("p",[e("code",[o._v("vim .gitignore")]),e("br"),o._v("\ngit ignore - lista de arquivos que não devem ser upados para o repositório"),e("br"),o._v("\ninsira os arquivos que devem ser ignorados ou insira as extensões que devem ser ignoradas. ex: senhas.txt ou *.doc")]),o._v(" "),e("p",[e("strong",[o._v("git stash - guarda modificação enquanto você edita")]),e("br"),o._v(" "),e("code",[o._v("git stash")]),o._v(" - pra criar o arquivo"),e("br"),o._v(" "),e("code",[o._v("git stash creat 'nome_do_stage'")]),o._v(" - cria com mensagem"),e("br"),o._v(" "),e("code",[o._v("git stash apply")]),o._v(" - retorna o arquivo guardado"),e("br"),o._v(" "),e("code",[o._v("git stash list")]),o._v(" - mostra o que está guardado"),e("br"),o._v(" "),e("code",[o._v("git stash clear")]),o._v(" - limpa stash")]),o._v(" "),e("p",[e("code",[o._v("git config --global alias.novo_comando comando_a_substituir")]),e("br"),o._v("\nalias - cria atalhos para comandos")]),o._v(" "),e("p",[e("code",[o._v('git tag -a nome_da_tag -m "Mensagem"')]),e("br"),o._v(" "),e("code",[o._v("git push origin master --tags")]),e("br"),o._v("\ntags - serve para indicar novas versões (releases)")]),o._v(" "),e("h3",{attrs:{id:"apagar-tags-e-branches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apagar-tags-e-branches"}},[o._v("#")]),o._v(" Apagar tags e branches")]),o._v(" "),e("p",[e("code",[o._v("git revert hash_do_commit")]),e("br"),o._v("\ngit Revert - cria um novo commit apagando as ultimas alterações mas mantém o commit anterior, diferente do reset que apaga o commit")]),o._v(" "),e("p",[e("strong",[o._v("Recuperar arquivo deletado")]),e("br"),o._v(" "),e("code",[o._v("git status")]),e("br"),o._v(" "),e("code",[o._v("git checkout -- nome_do_arquivo_deletado")])]),o._v(" "),e("p",[e("strong",[o._v("Apagar tags e branches remotos")]),e("br"),o._v(" "),e("code",[o._v("git push origin :nome_Da_tag")]),e("br"),o._v(" "),e("code",[o._v("git push origin :nome_do_Branch")])]),o._v(" "),e("p",[e("code",[o._v('git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch nomeDoArquivo" HEAD')]),o._v("\nremover arquivo do histórico do git -> se você upou um arquivo critíco e deseja apagar ele completamente do repositório.")]),o._v(" "),e("p",[e("strong",[o._v("Fork")]),e("br"),o._v("\nÉ uma cópia exata do projeto original para sua conta do Github, vá no repositório remoto que deseja e clique em fork, depois é só dar um clone do repositório copiado para sua máquina.")])])}),[],!1,null,null,null);a.default=s.exports}}]);